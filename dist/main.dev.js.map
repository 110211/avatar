{"version":3,"sources":["main.js"],"names":["express","require","bodyParser","db","jwt","app","port","process","env","PORT","TZ","use","urlencoded","extended","json","__dirname","get","req","res","sendFile","root","setHeader","header","token","getTokenFromHeader","verify","verifyJWTToken","send","JSON","stringify","message","success","user","post","body","password","findData","data","length","createJWTToken","right","listen","console","log"],"mappings":"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","sourcesContent":["\r\nconst express = require('express')\r\nconst bodyParser = require('body-parser')\r\nconst db = require('./lib/mongo')\r\nconst jwt = require('./lib/jwt')\r\nconst app = express()\r\nconst port = process.env.PORT || 3000\r\n\r\n\r\n\r\nprocess.env.TZ = 'Asia/Ho_Chi_Minh' \r\n\r\napp.use(bodyParser.urlencoded({ extended: true }))\r\napp.use(express.urlencoded({extended: true}))\r\napp.use(express.json({extended: true}))\r\napp.use(express.static(__dirname))\r\n\r\napp.get('/', (req, res) => {\r\n    res.sendFile('./index.html', {root: __dirname})\r\n})\r\n\r\napp.get('/login', (req, res) => {\r\n    res.sendFile('./login.html', {root: __dirname})\r\n})\r\n\r\napp.get('/me', (req, res) => {\r\n    res.setHeader(\"content-type\", \"application/json; charset=utf-8\")\r\n    let header = req.header('authorization')\r\n    let token = jwt.getTokenFromHeader(header)\r\n    let verify = jwt.verifyJWTToken(token)\r\n    if (!verify) {\r\n        res.send(JSON.stringify({message: \"Token không hợp lệ hoặc đã hết hạn\", success: false}))\r\n    } else {\r\n        res.send(JSON.stringify({message: 'Kiểm tra thông tin thành công', user: verify.user, success: true}))\r\n    }\r\n}) \r\n\r\napp.get('/admin', (req, res) => {\r\n    res.sendFile('./adpanel.html', {root: __dirname})\r\n})\r\n/// api\r\n\r\napp.post('/api/login', async (req, res) => {\r\n    let user = req.body.user\r\n    let password = req.body.password\r\n    let data = await db.findData('plantszombie', 'users', {user: user, password: password})\r\n    res.setHeader(\"content-type\", \"application/json; charset=utf-8\")\r\n    if (data.length > 0) {\r\n        res.send(JSON.stringify({\r\n            success: true,\r\n            token: jwt.createJWTToken({user: user}),\r\n            right: data[0].right,\r\n            message: \"Login thành công\"\r\n        }))\r\n    } else {\r\n        \r\n        res.send(JSON.stringify({\r\n            success: false,\r\n            message: \"Sai tài khoản hoặc mật khẩu\"\r\n        }))\r\n    }\r\n})\r\n\r\n\r\napp.listen(port, function(){\r\n    console.log(\"server is running on port 3000\")\r\n})"],"file":"main.dev.js"}